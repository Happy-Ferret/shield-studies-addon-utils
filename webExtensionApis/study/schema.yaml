# Interface schema
# https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/schema.html
# possible types are here
# - https://searchfox.org/mozilla-central/source/toolkit/components/extensions/Schemas.jsm#2418-2426
#
# - properties
# - functions
# - events
# - types
#
# - type property:
#   boolean, integer, number, string, array, object, or any.
#

# TODO
# - add json schema types
# - do we want to expose any of the sampling / hashing stuff?
# - mention / decide how to handle all
---
- namespace: study
  description: Interface for Shield and Pioneer studies.
  apiVersion: 5  # for dev use
  types:   # TODO @glind to actually get this back out of the schemas.json
  - id: studyTypesEnum
    type: string
    enum: ['shield', 'pioneer']
    testcase:  'shield'

  - id: weightedVariations
    type: array
    items:
      type: 'object'
      properties:
        name:
          type: "string"
        weight:
          type: "number"
          minimum: 0
      required: ["name", "weight"]
    testcase: [{name: feature-active, weight: 1.5}]

  - id: anEndingObject
    # TBD, this is incomplete, and seems a little rocky
    # Should endings be a list?  a map?
    # goal make endStudy and this agree :)
    # what to name the 'return' from endStudy?  EndingInstructions
    type: object
    additionalProperties: true
    testcase: {baseUrls: ['some.url'], endingName: 'anEnding', endingClass: 'ended-positive'}

  - id: studySetup
    type: object
    properties:
      activeExperimentName:
        type: string
      studyType:
        $ref: studyTypesEnum
      expire:
        type: 'object'
        properties:
          days:
            type: 'integer'
      endings:
        type: object
        additionalProperties: true
      weightedVariations:
        $ref: 'weightedVariations'
      logLevel:
        type: "integer"
        minimum: 0
      telemetry:
        type: object
        properties:
          send:
            type: boolean
          removeTestingFlag:
            type: boolean

    required:
    - activeExperimentName
    - studyType
    - endings
    - weightedVariations
    - logLevel
    - telemetry
    additionalProperties: true
    testcase: {
      activeExperimentName: aStudy,
      studyType: 'shield',
      expire: { "days": 10},
      # TODO: sort out endings soon
      endings: {anEnding: {baseUrl: 'some.url'}},
      logLevel: 30,
      weightedVariations: [{name: feature-active, weight: 1.5}],
      telemetry: {  send: false, removeTestingFlag: false}
    }

  - id: telemetryPayload
    type: object
    additionalProperties: true
    testcase: {foo: 'bar'}

  - id: searchTelemetryQuery
    type: object
    properties:
      type: {type: ['array'], items: {type:'string'}, optional: true}
      n: {type: integer, optional: true}
      minimumTimestamp: {type: number, optional: true}
      headersOnly: {type: boolean, optional: true}
    additionalProperties: false
    testcase: {type: ['shield-study-addon', 'shield-study'], n: 100, minimumTimestamp: 1523968204184, headersOnly: false}

  functions:
  - name: setup
    type: function
    async: true
    description: |
      Attempt an setup/enrollment, with these effects:

      - sets 'studyType' as Shield or Pioneer
        - affects telemetry
        - watches for dataPermission changes that should *always*
          stop that kind of study

      - Use or choose variation
        - `testing.variation` if present
        - OR deterministicVariation
          for the studyType using `weightedVariations`

      - During firstRun[1] only:
        - set firstRunTimestamp pref value
        - send 'enter' ping
        - if `allowEnroll`, send 'install' ping
        - else endStudy("ineligible") and return

      - Every Run
        - setActiveExperiment(studySetup)
        - monitor shield | pioneer permission endings
        - suggests alarming if `expire` is set.

      Returns:
      - studyInfo object (see `getStudyInfo`)

      Telemetry Sent (First run only)

        - enter
        - install

      Fires Events

      (At most one of)
      - study:onReady  OR
      - study:onEndStudy

      Preferences set
      - `shield.${runtime.id}.firstRunTimestamp`

      Note:
      1. allowEnroll is ONLY used during first run (install)

    parameters:
    - name: studySetup
      $ref: studySetup # TODO, for now, making progress up above

  - name: endStudy
    type: function
    async: true
    defaultReturn: {urls: ['url1','url2'], endingName:'some-reason'}
    description: |
      Signal to browser.study that it should end.

      Usage scenarios:
      - addons defined
        - postive endings (tried feature)
        - negative endings (client clicked 'no thanks')
        - expiration / timeout (feature should last for 14 days then uninstall)

      Logic:
      - If study has already ended, do nothing.
      - Else: END

      END:
      - record internally that study is ended.
      - disable all methods that rely on configuration / setup.
      - clear all prefs stored by `browser.study`
      - fire telemetry pings for:
        - 'exit'
        - the ending, one of:

          "ineligible",
          "expired",
          "user-disable",
          "ended-positive",
          "ended-neutral",
          "ended-negative",

      - augment all ending urls with query urls
      - fire 'study:end' event to `browser.study.onEndStudy` handlers.

      Addon should then do
      - open returned urls
      - feature specific cleanup
      - uninstall the addon

      Note:
      1.  calling this function multiple time is safe.
      `browser.study` will choose the

    parameters:
    - name: anEndingAlias
      type: 'string'
    - name: anEndingObject
      $ref: anEndingObject
      optional: true

  ## study / client information things
  - name: getStudyInfo
    type: function
    async: true
    description: |
      current study configuration, including
      - variation
      - activeExperimentName
      - timeUntilExpire
      - firstRunTimestamp

      But not:
      - telemetry clientId

      Throws Error if called before `browser.study.setup`

    defaultReturn: {variation: "styleA", firstRunTimestamp: 1523968204184, activeExperimentName: "some experiment", timeUntilExpire: null}  # TODO add rest
    parameters: []

  - name: getDataPermissions
    type: function
    async: true
    description: object of current dataPermissions with keys shield, pioneer, telemetry, 'ok'
    defaultReturn: {shield: true, pioneer: false, telemetry: true, alwaysPrivateBrowsing: false}
    parameters: []

  # telemetry related things
  - name: sendTelemetry
    type: function
    description: |
      Send Telemetry using appropriate shield or pioneer methods.

      shield:
      - `shield-study-addon` ping, requires object string keys and string values

      pioneer:
      - TBD

      Note:
      - no conversions / coercion of data happens.

      Note:
      - undefined what happens if validation fails
      - undefined what happens when you try to send 'shield' from 'pioneer'

      TBD fix the parameters here.

    async: true
    parameters:
    - name: payload
      $ref: telemetryPayload

    defaultReturn: undefined  # exception if out of policy based on config

  - name: searchSentTelemetry
    type: function
    async: true
    description: |
      Search locally stored telemetry pings using these fields (if set)

      n:
        if set, no more than `n` pings.
      type:
        Array of 'ping types' (e.g., main, crash, shield-study-addon) to filter
      minimumTimestamp:
        only pings after this timestamp.
      headersOnly:
        boolean.  If true, only the 'headers' will be returned.

      Pings will be returned sorted by timestamp with most recent first.

      Usage scenarios:
      - enrollment / eligiblity using recent Telemetry behaviours or client environment
      - addon testing scenarios

    defaultReturn: [{pingType: 'main'}]
    parameters:
    - name: searchTelemetryQuery
      $ref: searchTelemetryQuery

  # utilities
  - name: deterministicVariation
    description: |
      Choose a element from `weightedVariations` array
      based on various hashes of clientId

      - shield:  TBD
      - pioneer: TBD

    type: function
    async: true
    defaultReturn: "styleA"
    parameters:
    - name: weightedVariations
      $ref: weightedVariations
    - name: algorithm
      $ref: studyTypesEnum
    - name: fraction
      type: number
      optional: true

  - name: surveyUrl
    type: function
    async: true
    description: |
      Format url with study covariate queryArgs appended / mixed in.

      Use this for constructing midpoint surveys.

    defaultReturn: 'https://example.com?version=59.0&branch=studyA'
    parameters:
    - name: baseUrl
      type: string
    - name: additionalFields
      type: object
      optional: true

  - name: validateJSON
    type: function
    async: true
    defaultReturn: {valid: true, errors: []}
    description:  Using AJV, do jsonschema validation of an object.  Can be used to validate your arguments, packets at client.
    parameters:
    - name: someJson
      type: object
    - name: jsonschema
      type: object  # a jsonschema
      descripton: a valid jsonschema object

  - name: log
    type: function
    async: true
    descripton:  Log to the browser.study.logger.  Affected by study logLevel
    parameters:
    - name: thingToLog
      type: [string, array]

  # things that would be 'listeners' are 'events' in webExtensions
  # https://github.com/motin/shield-studies-addon-template/blob/convert-to-webextension-experiments/src/privileged/introductionNotificationBar/api.js#L107
  # https://github.com/motin/shield-studies-addon-template/blob/convert-to-webextension-experiments/src/privileged/introductionNotificationBar/schema.json#L15

  # https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/background.html#javascript-apis
  # https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/events.html
  # https://dxr.mozilla.org/mozilla-central/source/toolkit/components/extensions/parent/ext-runtime.js#41
  # https://searchfox.org/mozilla-central/source/toolkit/components/extensions/ExtensionCommon.jsm#1671
  events:
  - name: onDataPermissionsChange
    type: function
    defaultReturn: {shield: true, pioneer: false}
    description: Fires whenever any 'dataPermission' changes, with the new dataPermission object.  Allows watching for shield or pioneer revocation.
    parameters:  # for the callback
    - name: updatedPermissions
      type: object

  - name: onReady
    type: function
    defaultReturn: {variation: 'styleA', firstRunTimestamp: 1523968204184}
    description: Fires when the study is 'ready' for the feature to startup.
    parameters:  # for the callback
    - name: studyInfo
      type: object

  - name: onEndStudy
    type: function
    defaultReturn: {urls: [], reason: 'some-reason'}
    description: |
      Listen for when the study wants to end.

      Act on it by
      - opening surveyUrls
      - tearing down your feature
      - uninstalling the addon

    parameters:  # for the callback
    - name: endingSteps
      type: object


- namespace:  studyTest
  description: Interface for Test Utilities
  apiVersion: 5  # for dev use
  functions:
    - name: firstSeen
      type: function
      async: true
      descripton:
      parameters: []

    - name: setActive
      type: function
      async: true
      descripton:
      parameters: []

    - name: startup
      type: function
      async: true
      descripton:
      parameters:
      - name: details
        type: object
        additionalProperties: true

- namespace: prefs
  description: |
    Temporary subset of `Services.prefs` API,
    described at:  https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Services.jsm

    See https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrefBranch

    No attempt here to improve the api at all.

    TODO: Convert observers to events.

    If a true 'prefs' api lands in tree, this module will be removed.

  apiVersion: 5  # for dev use
  functions:
  - name: getStringPref
    type: 'function'
    async: true
    description: ''
    parameters:
    - name: aPrefName
      type: 'string'
    - name: aDefaultValue
      type: 'string'
      optional: true
